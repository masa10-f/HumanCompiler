[project]
name = "taskagent-api"
version = "0.1.0"
description = "AI-powered task management API"
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "supabase>=2.0.0",
    "pydantic>=2.5.0",
    "sqlmodel>=0.0.14",
    "ortools>=9.8.0",
    "openai>=1.30.0",
    "langgraph>=0.1.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
taskagent_api = ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]

[project.scripts]
taskagent-api = "taskagent_api.main:app"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
extend-select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "B008",  # Allow function calls in argument defaults for FastAPI
    "B904",  # Exception handling with raise ... from err (will be fixed in follow-up)
    "E722",  # Do not use bare except (will be fixed in follow-up)
    "C416",  # Unnecessary list comprehension (will be fixed in follow-up)
    "B017",  # pytest.raises(Exception) (will be fixed in follow-up)
    "F841",  # Unused local variable (will be fixed in follow-up)
    "B028",  # No explicit stacklevel keyword argument (will be fixed in follow-up)
    "F401",  # Unused import (will be fixed in follow-up)
    "F811",  # Redefinition of unused variable (will be fixed in follow-up)
    "E501",  # Line too long (will be fixed in follow-up - focus on functionality first)
    "W291",  # Trailing whitespace (will be fixed in follow-up)
    "I001",  # Import block is un-sorted or un-formatted (will be fixed in follow-up)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true

[tool.coverage.run]
source = ["src"]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.coverage.report]
precision = 1
show_missing = true
skip_covered = false
minimum_coverage = 80

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test